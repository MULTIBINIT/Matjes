message("reading config.cmake")

set(CMAKE_CXX_COMPILER "g++")
set(CMAKE_Fortran_COMPILER "gfortran")
#set(CMAKE_CXX_COMPILER "mpic++")
#set(CMAKE_Fortran_COMPILER "mpif90")
#set(CMAKE_CXX_COMPILER "g++-8")
#set(CMAKE_Fortran_COMPILER "gfortran-8")

#manual adds to fortran compiler
set(compadd "")			#add to release and debug
set(com_rel_add "")     #add to release
set(com_deb_add "")		#add to debug 
set(CMAKE_Fortran_FLAGS_RELEASE "-O3 -fno-protect-parens -ffast-math")
set(CMAKE_CXX_FLAGS_RELEASE "-Ofast -march=native -mtune=intel")

if(DEFINED ENV{MKLROOT})
  set(MKLROOT $ENV{MKLROOT})
  set(add_lib ${add_lib} "-L${MKLROOT}/lib/intel64 -Wl,--no-as-needed -lmkl_gf_lp64 -lmkl_gnu_thread -lmkl_core -lgomp -lpthread -lm -ldl")
  include_directories( ${MKLROOT}/include )
  #MPI STUFF
  #set(add_lib ${add_lib} " -Wl,-rpath -Wl,/usr/lib/openmpi -Wl,--enable-new-dtags -L/usr/lib/openmpi -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi -lmpi_cxx")
  #include_directories( /usr/lib/openmpi /usr/include )
else()
  message( FATAL_ERROR "Did not find ${MKLROOT} environment variable" )
endif()

#if(DEFINED ENV{CUDA_PATH})
#  set(CUDA_PATH $ENV{CUDA_PATH})
#  set(add_lib ${add_lib} "-L${CUDA_PATH}/lib64 -lcusparse -lcudart")
#  include_directories( ${CUDA_PATH}/include )
#else()
#  message( FATAL_ERROR "Did not find ${CUDA_PATH} environment variable" )
#endif()

#PREPROCESSOR FLAGS
#add_compile_definitions(CPP_MKL_SPBLAS)
add_compile_definitions(CPP_BRUTDIP)
add_compile_definitions(CPP_EIGEN_H)
#add_compile_definitions(CPP_CUDA)
add_compile_definitions(CPP_DENSE)
#add_compile_definitions(CPP_MPI)
add_compile_definitions(CPP_MRG)
add_compile_definitions(CPP_BLAS)
add_compile_definitions(CPP_DEBUG)
#add_compile_definitions(EIGEN_USE_MKL_ALL MKL_DIRECT_CALL)
