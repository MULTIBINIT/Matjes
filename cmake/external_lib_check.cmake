#check for CUDA and set parameters if used
if(( USE_CUDA OR NOT DEFINED USE_CUDA) AND DEFINED ENV{CUDA_PATH})
    message("\n\nFOUND CUDA and compiling with it.\n\n" )
    set(USE_CUDA TRUE)
    enable_language (CUDA)
    add_compile_definitions(CPP_CUDA)
    set(CUDA_PATH $ENV{CUDA_PATH})
    link_directories( ${CUDA_PATH}/lib64 )
    include_directories( ${CUDA_PATH}/include )
    if(NOT DEFINED CMAKE_CUDA_ARCHITECTURES)
        set(CMAKE_CUDA_ARCHITECTURES 75)
    endif()
elseif(USE_CUDA AND NOT DEFINED ENV{CUDA_PATH})
    message( FATAL_ERROR "\n\nEnforcing to use cuda, but CUDA_PATH is not defined.\n Export the CUDA_PATH environment variable or remove USE_CUDA in config.cmake\n\n" )
else()
    message( "\n\nSkipping CUDA-part of compilation\n\n" )
endif()

#check for EIGEN and set parameters if used
find_package (Eigen3 3.3 NO_MODULE)
if((USE_EIGEN OR NOT DEFINED USE_EIGEN) AND Eigen3_FOUND)
    message("\n\nFOUND Eigen library and compiling with it.\n\n" )
    add_compile_definitions(CPP_EIGEN)
    set(USE_EIGEN TRUE)
elseif(USE_EIGEN AND NOT Eigen3_FOUND)
    message( FATAL_ERROR "\n\nEnforcing to use EIGEN, but library can not be found.\n\n" )
else()
    message( "\n\nSkipping Eigen-part of compilation\n\n" )
endif()

#check for MKL
if((USE_MKL OR NOT DEFINED USE_MKL) AND DEFINED ENV{MKLROOT})
    message("\n\nFOUND MKL library and compiling with it.\n\n" )
    add_compile_definitions(CPP_MKL_SPBLAS)
    include_directories( $ENV{MKLROOT}/include )
    link_directories( $ENV{MKLROOT}/lib/intel64 )
    if(NOT DEFINED MKL_linker)
        set(MKL_linker "-Wl,--no-as-needed -lmkl_gf_lp64 -lmkl_gnu_thread -lmkl_core -lgomp -lpthread -lm -ldl") 
    endif()
    set(add_lib ${add_lib} ${MKL_linker})
    set(USE_MKL TRUE)
elseif(USE_MKL AND NOT DEFINED ENV{MKLROOT})
    message( FATAL_ERROR "\n\nEnforcing to use MKL, but library can not be found.\n\n" )
else()
    message( "\n\nSkipping MKL-part of compilation\n\n" )
endif()
