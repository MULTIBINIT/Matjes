#check for CUDA and set parameters if used
message("\n\n Search for CUDA using environment CUDA_PATH")
if(( USE_CUDA OR NOT DEFINED USE_CUDA) AND DEFINED ENV{CUDA_PATH})
    message("FOUND CUDA and compiling with it.\n\n" )
    set(USE_CUDA TRUE)
    enable_language (CUDA)
    add_compile_definitions(CPP_CUDA)
    set(CUDA_PATH $ENV{CUDA_PATH})
    link_directories( ${CUDA_PATH}/lib64 )
    include_directories( ${CUDA_PATH}/include )
    if(NOT DEFINED CMAKE_CUDA_ARCHITECTURES)
        set(CMAKE_CUDA_ARCHITECTURES 75)
    endif()
elseif(USE_CUDA AND NOT DEFINED ENV{CUDA_PATH})
    message( FATAL_ERROR "Enforcing to use cuda, but CUDA_PATH is not defined.\n Export the CUDA_PATH environment variable or remove USE_CUDA in config.cmake\n\n" )
else()
    message( "Skipping CUDA-part of compilation\n\n" )
endif()

#check for EIGEN and set parameters if used
message("\n\n Search for EIGEN")
find_package (Eigen3 3.3 NO_MODULE)
if((USE_EIGEN OR NOT DEFINED USE_EIGEN) AND Eigen3_FOUND)
    message("FOUND Eigen library and compiling with it.\n\n" )
    add_compile_definitions(CPP_EIGEN)
    set(USE_EIGEN TRUE)
elseif(USE_EIGEN AND NOT Eigen3_FOUND)
	message( FATAL_ERROR "Enforcing to use EIGEN, but library can not be found.\n\n" )
else()
    message( "Skipping Eigen-part of compilation\n\n" )
endif()

#check for MKL
message("\n\n CHECK If MKL is defined using environment MKLROOT")
if((USE_MKL OR NOT DEFINED USE_MKL) AND DEFINED ENV{MKLROOT})
    message("FOUND MKL library and compiling with it.\n\n" )
    add_compile_definitions(CPP_MKL)
    set(USE_MKL TRUE)

    if(DEFINED MKL_library_path)
        link_directories( ${MKL_library_path})
	message("Using manually set MKL library path: ${MKL_library_path}")
    else()
        link_directories( $ENV{MKLROOT}/lib/intel64 )
	message("Using default MKL library path")
    endif()

    if(DEFINED MKL_include_path)
        include_directories( ${MKL_include_path})
	message("Using manually set MKL include path: ${MKL_include_path}")
    else()
    	include_directories( $ENV{MKLROOT}/include )
	message("Using default MKL include path.")
    endif()

    if(DEFINED MKL_linker)
	message("Using manually set MKL linker: ${MKL_linker}")
    else()
        set(MKL_linker "-Wl,--no-as-needed -lmkl_gf_lp64 -lmkl_gnu_thread -lmkl_core -lgomp -lpthread -lm -ldl") 
	message("Using default MKL linker: -Wl,--no-as-needed -lmkl_gf_lp64 -lmkl_gnu_thread -lmkl_core -lgomp -lpthread -lm -ldl")
    endif()
    set(add_lib ${add_lib} ${MKL_linker})

elseif(USE_MKL AND NOT DEFINED ENV{MKLROOT})
    message( FATAL_ERROR "Enforcing to use MKL, but library can not be found.\n\n" )
else()
    message( "Skipping MKL-part of compilation\n\n" )
endif()


#check for BLAS
message("\n\n Search for BLAS")
find_package(BLAS)
if((USE_BLAS OR NOT DEFINED USE_BLAS) AND BLAS_FOUND)
    if(USE_MKL)
        message("FOUND BLAS library, but since MKL is already found that is used.\n\n" )
        set(USE_BLAS FALSE)
    else()
        message("\n\nFOUND BLAS library and using that implementation\n\n" )
        set(USE_BLAS TRUE)
    endif()
    add_compile_definitions(CPP_BLAS)
elseif(USE_BLAS AND NOT BLAS_FOUND AND NOT USE_MKL)
    message( FATAL_ERROR "Enforcing to use BLAS, but library can not be found.\n\n" )
else()
    message( "Skipping BLAS-part of compilation\n\n" )
endif()


#check for lapack
message("\n\n Search for LAPACK")
find_package(LAPACK)
if((USE_LAPACK OR NOT DEFINED USE_LAPACK) AND LAPACK_FOUND)
    if(USE_MKL)
        message("FOUND LAPACK library, but since MKL is already found that is used.\n\n" )
        set(USE_LAPACK FALSE)
    else()
        message("FOUND LAPACK library and using that implementation\n\n" )
        set(USE_LAPACK TRUE)
    endif()
    add_compile_definitions(CPP_LAPACK)
elseif(USE_LAPACK AND NOT LAPACK_FOUND AND NOT USE_MKL)
    message( FATAL_ERROR "Enforcing to use LAPACK, but library can not be found.\n\n" )
else()
    message( "Skipping LAPACK-part of compilation\n\n" )
endif()

message("\n\n Search for NETCDF")
if( NOT DEFINED netCDF_fortran_library)
    set(netCDF_fortran_library "netcdff")
endif()
try_compile(FOUND_netCDF "${CMAKE_BINARY_DIR}/temp" "${CMAKE_SOURCE_DIR}/cmake/tests/netcdf.f90"
    LINK_LIBRARIES "${netCDF_fortran_library}")
if((USE_netCDF OR NOT DEFINED USE_netCDF) AND FOUND_netCDF)
    message(" Success testing netCDF.\n Using library linker: ${netCDF_fortran_library}\n\n")
    add_compile_definitions(CPP_NETCDF)
    set(USE_netCDF TRUE)
elseif(USE_netCDF AND NOT FOUND_netCDF)
    message( FATAL_ERROR "Enforcing to use netCDF, but library can not be found.\nSet include_directory() and set(netCDF_fortran_library \"...\") in config.cmake with respecitive directory and library linker.\n\n")
else()
    message( "Failed netcdf test.\nSkipping netCDF-part of compilation\n\n" )
endif()

